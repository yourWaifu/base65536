#include "base65536/base65536.h"

constexpr auto getBadStringsList() {
    //note: all strings here DO NOT end with null
    return std::make_tuple(
        std::to_array<char32_t>({ 0x00000061, 0x00000062, 0x00000063 }),
        std::to_array<char32_t>({ 0x000015b3, 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x000285fe }),
        std::to_array<char32_t>({ 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x00001503, 0x000285fe }),
        std::to_array<char32_t>({ 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x00001503, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x000285fe }),
        std::to_array<char32_t>({ 0x00001525, 0x00001513 }),
        std::to_array<char32_t>({ 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x000285fe, 0x00000061, 0x00000062, 0x00000063 }),
        std::to_array<char32_t>({ 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x000285fe, 0x0000000a }),
        std::to_array<char32_t>({ 0x00001525, 0x00001513 }),
        std::to_array<char32_t>({ 0x00003500, 0x00003702, 0x00003904, 0x00003b06, 0x00003d08, 0x00003f0a, 0x0000410c, 0x0000430e, 0x00004510, 0x00004712, 0x00004914, 0x00004b16, 0x00004e18, 0x0000501a, 0x0000521c, 0x0000541e, 0x00005620, 0x00005822, 0x00005a24, 0x00005c26, 0x00005e28, 0x0000602a, 0x0000622c, 0x0000642e, 0x00006630, 0x00006832, 0x00006a34, 0x00006c36, 0x00006e38, 0x0000703a, 0x0000723c, 0x0000743e, 0x00007640, 0x00007842, 0x00007a44, 0x00007c46, 0x00007e48, 0x0000804a, 0x0000824c, 0x0000844e, 0x00008650, 0x00008852, 0x00008a54, 0x00008c56, 0x00008e58, 0x0000905a, 0x0000925c, 0x0000945e, 0x00009660, 0x00009862, 0x00009a64, 0x00009c66, 0x00009e68, 0x0000a26a, 0x0000a56c, 0x0001206e, 0x00012270, 0x00013172, 0x00013374, 0x00014576, 0x00016978, 0x0002017a, 0x0002037c, 0x0002057e, 0x00020780, 0x00020982, 0x00020b84, 0x00020d86, 0x00020f88, 0x0002118a, 0x0002138c, 0x0002158e, 0x00021790, 0x00021992, 0x00021b94, 0x00021d96, 0x00021f98, 0x0002219a, 0x0002239c, 0x0002259e, 0x000227a0, 0x000229a2, 0x00022ba4, 0x00022da6, 0x00022fa8, 0x000231aa, 0x000233ac, 0x000235ae, 0x000237b0, 0x000239b2, 0x00023bb4, 0x00023db6, 0x00023fb8, 0x000241ba, 0x000243bc, 0x000245be, 0x000247c0, 0x000249c2, 0x00024bc4, 0x00024dc6, 0x00024fc8, 0x000251ca, 0x000253cc, 0x000255ce, 0x000257d0, 0x000259d2, 0x00025bd4, 0x00025dd6, 0x00025fd8, 0x000261da, 0x000263dc, 0x000265de, 0x000267e0, 0x000269e2, 0x00026be4, 0x00026de6, 0x00026fe8, 0x000271ea, 0x000273ec, 0x000275ee, 0x000277f0, 0x000279f2, 0x00027bf4, 0x00027df6, 0x00027ff8, 0x000281fa, 0x000283fc, 0x000285fe, 0x000015c7, 0x000015c1 })
    );
}

template<typename Array>
constexpr auto testDecoder(const Array& arr) {
    constexpr auto size = sizeof(Array) / sizeof(typename Array::value_type);
    return Base65536::decode<Array, size * 4>(arr, size);
}

constexpr bool testErrorChecks() {
    constexpr auto list = getBadStringsList();

    std::size_t successCount = 0;
    std::apply(
        [&successCount](auto&&... args) {
            ((successCount += (testDecoder(args).success) ? 1 : 0), ...);
        }, list);
    return successCount == 0;
}

static_assert(testErrorChecks());

template<size_t I = 0, typename... Tp>
void testFail(const std::tuple<Tp...>& t, std::size_t& successCount) {
    bool fail = false;
    const auto arr = get<I>(t);
    std::string a = Base65536::decode(std::u32string(std::u32string_view( arr.data(), arr.size() )), fail);
    successCount += fail ? 0 : 1;
    if constexpr (I + 1 != sizeof...(Tp))
        testFail<I + 1>(t, successCount);
}

bool testErrorChecks(int& exitState) {
    constexpr auto list = getBadStringsList();

    std::size_t successCount = 0;
    testFail(list, successCount);
    return successCount == 0;
}

constexpr auto getTestPairs() {
    //note: all strings here are null terminaling
    return std::make_tuple(
        std::make_pair(std::to_array<char8_t>({ 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0 }), std::to_array<char32_t>({ 0x00009a68, 0x0000a36c, 0x0000556f, 0x00012077, 0x0000a372, 0x00001564, 0 })),
        std::make_pair(std::to_array<char8_t>({ 0 }), std::to_array<char32_t>({ 0 })),
        std::make_pair(std::to_array<char8_t>({ 0x00, 0x6e, 0 }), std::to_array<char32_t>({ 0x00010600, 0 })),
        std::make_pair(std::to_array<char8_t>({ 0xC0, 0x03, 0x91, 0xC0, 0x03, 0x8D, 0xC0, 0x02, 0x80, 0x00, 0x8B, 0xC0, 0x01, 0x90, 0xC0, 0x01, 0x8E, 0xC0, 0x90, 0x42, 0x91, 0xC0, 0x43, 0x8E, 0x41, 0x90, 0xC0, 0x42, 0x8E, 0x40, 0x90, 0xC0, 0x41, 0x9F, 0xC0, 0x40, 0x8E, 0x41, 0xC0, 0x42, 0x8D, 0x00, 0x90, 0xC0, 0x8E, 0xC0, 0x41, 0x8C, 0xC0, 0x42, 0x97, 0x01, 0x8B, 0xC0, 0x03, 0x8B, 0x40, 0x80, 0xC0, 0x41, 0x83, 0xC0, 0x44, 0x8D, 0x41, 0x00, 0x8B, 0x40, 0x8A, 0xC0, 0x43, 0x89, 0xC0, 0x42, 0x8A, 0x02, 0xC0, 0x00, 0x8C, 0x40, 0x80, 0x41, 0x80, 0xC2, 0x03, 0x8D, 0x40, 0x80, 0xC0, 0x80, 0xC0, 0x80, 0xC2, 0x03, 0x8E, 0xC0, 0x81, 0xC0, 0x03, 0x8E, 0x02, 0x8E, 0x03, 0x8E, 0x42, 0x00, 0x8D, 0x00, 0x40, 0x8D, 0x01, 0x8D, 0x03, 0x8D, 0xC0, 0x03, 0x8B, 0xC0, 0x04, 0x89, 0xC0, 0x03, 0x87, 0xC0, 0x01, 0x8B, 0xC0, 0x01, 0x89, 0xC0, 0x8B, 0x42, 0x8C, 0x40, 0xC0, 0x42, 0x89, 0x41, 0x8C, 0xC0, 0x42, 0x88, 0x40, 0x8B, 0xC0, 0x41, 0x95, 0xC0, 0x40, 0x89, 0xC0, 0x45, 0x88, 0x00, 0x8B, 0xC0, 0x89, 0xC0, 0x41, 0x87, 0xC0, 0x42, 0x8D, 0x01, 0x86, 0xC0, 0x03, 0x86, 0x40, 0xC0, 0x80, 0xC0, 0x41, 0x83, 0xC0, 0x45, 0x88, 0x41, 0x00, 0x86, 0x40, 0x85, 0xC0, 0x43, 0x84, 0xC0, 0x42, 0x85, 0x02, 0xC2, 0x00, 0x89, 0x43, 0x80, 0x01, 0xC2, 0x01, 0x88, 0x40, 0x80, 0xC0, 0x80, 0xC0, 0x80, 0xC2, 0x03, 0x89, 0xC0, 0x81, 0x03, 0xC0, 0x00, 0x89, 0x01, 0x80, 0xC1, 0x88, 0x03, 0x89, 0x41, 0x88, 0x00, 0x40, 0x88, 0x01, 0x88, 0x03, 0x88, 0xC0, 0x03, 0x86, 0xC0, 0x03, 0x84, 0xC0, 0x01, 0x86, 0xC0, 0x01, 0x84, 0xC0, 0x86, 0x42, 0x87, 0xC0, 0x43, 0x84, 0x41, 0x86, 0xC0, 0x42, 0x84, 0xC0, 0x03, 0x83, 0x40, 0x86, 0xC0, 0x41, 0x8B, 0xC0, 0x40, 0x84, 0xC0, 0x43, 0x83, 0x00, 0x86, 0xC0, 0x84, 0x01, 0x86, 0xC0, 0x00, 0x84, 0xC0, 0x43, 0x83, 0xC0, 0x41, 0x83, 0x02, 0x86, 0x03, 0x86, 0xC0, 0x43, 0x83, 0xC0, 0x41, 0x83, 0xC0, 0x83, 0xC0, 0x01, 0x85, 0xC0, 0x01, 0x83, 0x01, 0xC0, 0x01, 0x84, 0xC0, 0x03, 0x82, 0 }), std::to_array<char32_t>({ 0x000037c0, 0x00024691, 0x00021303, 0x000036c0, 0x00003480, 0x0002468b, 0x00021601, 0x000035c0, 0x0002468e, 0x00007790, 0x00024691, 0x00021443, 0x00021641, 0x000077c0, 0x0000758e, 0x00024690, 0x00022541, 0x000075c0, 0x0000768e, 0x000077c0, 0x0000348d, 0x00024690, 0x0002468e, 0x00021241, 0x000077c0, 0x00003597, 0x0002468b, 0x00021103, 0x00020640, 0x000076c0, 0x00024683, 0x00021344, 0x00003441, 0x0000758b, 0x0002468a, 0x00020f43, 0x000077c0, 0x0000368a, 0x000034c0, 0x0000758c, 0x00007680, 0x00024880, 0x00021303, 0x00020640, 0x000206c0, 0x000206c0, 0x000037c2, 0x0002468e, 0x00024681, 0x00021403, 0x00021402, 0x00021403, 0x00003442, 0x0000348d, 0x00021340, 0x00021301, 0x00021303, 0x000037c0, 0x0002468b, 0x00020f04, 0x000037c0, 0x00024687, 0x00021101, 0x000035c0, 0x00024689, 0x0000778b, 0x0000758c, 0x000077c0, 0x00007689, 0x0002468c, 0x00020e42, 0x00021140, 0x000076c0, 0x00024695, 0x00020f40, 0x00007ac0, 0x00003488, 0x0002468b, 0x00024689, 0x00020d41, 0x000077c0, 0x0000358d, 0x00024686, 0x00020c03, 0x00024640, 0x00024680, 0x00020941, 0x00007ac0, 0x00007688, 0x00020c00, 0x00020b40, 0x000078c0, 0x00024684, 0x00020b42, 0x00024802, 0x00020f00, 0x00020643, 0x00024801, 0x00020e01, 0x00020640, 0x000206c0, 0x000206c0, 0x000037c2, 0x00024689, 0x00003781, 0x000034c0, 0x00003589, 0x00024780, 0x00003788, 0x00007689, 0x00003488, 0x00020e40, 0x00020e01, 0x00020e03, 0x000037c0, 0x00024686, 0x00020a03, 0x000035c0, 0x00024686, 0x00020a01, 0x00020cc0, 0x00020d42, 0x000078c0, 0x00007684, 0x00024686, 0x00020a42, 0x000037c0, 0x00007583, 0x00024686, 0x00021141, 0x000075c0, 0x00024684, 0x00020943, 0x00020c00, 0x00020ac0, 0x00020c01, 0x000034c0, 0x00024684, 0x00020943, 0x000076c0, 0x00003683, 0x00003786, 0x00024686, 0x00020943, 0x000076c0, 0x00024683, 0x00024683, 0x00020b01, 0x000035c0, 0x00003583, 0x000035c0, 0x00024684, 0x00020803, 0 })),
        std::make_pair(std::to_array<char8_t>({ 0xC3, 0xBB, 0xBB, 0x9C, 0x3B, 0xBB, 0x9C, 0x28, 0x0B, 0xBB, 0xC1, 0xBB, 0xBB, 0x8C, 0x1B, 0xBB, 0xAC, 0xBB, 0xBB, 0x86, 0xBB, 0xBB, 0x9C, 0x7B, 0xBB, 0xA5, 0xBB, 0xBB, 0x8C, 0x6B, 0xBB, 0xA4, 0xBB, 0xBB, 0x8C, 0x5B, 0xBB, 0xBB, 0xBB, 0xBC, 0x4B, 0xBB, 0xA5, 0xC6, 0xBB, 0xB9, 0x0B, 0xBB, 0xB8, 0xCB, 0xBB, 0xAC, 0x5B, 0xBB, 0x8C, 0x6B, 0xBB, 0xBB, 0xB1, 0xBB, 0xBC, 0x3B, 0xBB, 0x48, 0xC5, 0xBC, 0x74, 0xBB, 0xB9, 0x50, 0xBB, 0xB4, 0xBB, 0xAC, 0x7B, 0xB9, 0xC6, 0xBB, 0xA2, 0xC0, 0xBB, 0xB8, 0x48, 0x58, 0xE3, 0xBB, 0xB9, 0x48, 0xC8, 0xC8, 0xE3, 0xBB, 0xBA, 0xC9, 0xC3, 0xBB, 0xBA, 0x2B, 0xBB, 0xA3, 0xBB, 0xBA, 0x60, 0xBB, 0xB9, 0x04, 0xBB, 0xB9, 0x1B, 0xBB, 0x93, 0xBB, 0xB9, 0xC3, 0xBB, 0xBC, 0x30, 0xBB, 0x9C, 0x3B, 0xBC, 0x1B, 0xBB, 0xC1, 0xBB, 0x9C, 0xBB, 0xB6, 0xBB, 0xB8, 0x4C, 0x6B, 0xB9, 0x5B, 0xBB, 0x8C, 0x6B, 0xB8, 0x4B, 0xBB, 0xC5, 0xBB, 0xBB, 0xB9, 0xC4, 0xBB, 0x9C, 0x75, 0xBB, 0x80, 0xBB, 0xBC, 0xBB, 0x9C, 0x5B, 0xBC, 0x6B, 0xBB, 0x91, 0xBA, 0xC3, 0xBA, 0x4C, 0x8C, 0x5B, 0xC7, 0x5B, 0xB8, 0x50, 0xBA, 0x4B, 0x9C, 0x7B, 0x8C, 0x6B, 0x92, 0xE0, 0xBB, 0x97, 0x81, 0xE1, 0xBB, 0x84, 0x8C, 0x8C, 0x8E, 0x3B, 0xB9, 0xC9, 0x3C, 0x0B, 0xB9, 0x18, 0xDB, 0xB8, 0x3B, 0xB9, 0x5B, 0xB8, 0x04, 0xBB, 0x81, 0xBB, 0x83, 0xBB, 0x8C, 0x3B, 0xAC, 0x3B, 0x8C, 0x1B, 0xAC, 0x1B, 0x8C, 0xBA, 0x6B, 0xBC, 0x7B, 0x85, 0xBA, 0xC6, 0xB8, 0xC3, 0xB4, 0xBA, 0xC5, 0xBB, 0xBC, 0x4B, 0x8C, 0x7B, 0x0B, 0xAC, 0xB8, 0x1B, 0xAC, 0x0B, 0x8C, 0x7B, 0xC5, 0xB2, 0xBA, 0x3B, 0xAC, 0x7B, 0xC5, 0xBC, 0xBC, 0x1B, 0x9C, 0x1B, 0x1C, 0x1B, 0x8C, 0x3A, 0x0 }), std::to_array<char32_t>({ 0x000241c3, 0x000222bb, 0x0002413b, 0x00005d9c, 0x0002410b, 0x000241c1, 0x000212bb, 0x0002411b, 0x000241ac, 0x00020cbb, 0x000241bb, 0x0002019c, 0x00022bbb, 0x000241bb, 0x0000a28c, 0x00022abb, 0x000241bb, 0x0000908c, 0x000241bb, 0x000242bb, 0x0002414b, 0x00024ca5, 0x00023fbb, 0x0002410b, 0x000251b8, 0x000232bb, 0x0002415b, 0x0000a28c, 0x000241bb, 0x000241b1, 0x000070bc, 0x00007dbb, 0x000242c5, 0x00024174, 0x000085b9, 0x00023abb, 0x000232bb, 0x00023f7b, 0x000241c6, 0x000246a2, 0x00023ebb, 0x00008d48, 0x000241e3, 0x00007db9, 0x00024ec8, 0x000241e3, 0x00024fba, 0x000241c3, 0x000060ba, 0x000229bb, 0x000240bb, 0x00024160, 0x000038b9, 0x00023fbb, 0x0002411b, 0x00024193, 0x000249b9, 0x000242bb, 0x00024130, 0x0000709c, 0x000050bc, 0x000247bb, 0x000222bb, 0x00023cbb, 0x00023ebb, 0x0000a24c, 0x000090b9, 0x000212bb, 0x00023e6b, 0x0002414b, 0x000241c5, 0x00023fbb, 0x000241c4, 0x0001339c, 0x000206bb, 0x000242bb, 0x000222bb, 0x0002425b, 0x0002416b, 0x00024091, 0x000240c3, 0x0002124c, 0x00024d5b, 0x00023e5b, 0x00024050, 0x0002224b, 0x0002127b, 0x0002186b, 0x000241e0, 0x00020797, 0x000241e1, 0x00021284, 0x0002148c, 0x00023f3b, 0x000071c9, 0x00023f0b, 0x00026118, 0x000070b8, 0x000090b9, 0x000038b8, 0x000207bb, 0x000209bb, 0x000212bb, 0x0002323b, 0x0002123b, 0x0002321b, 0x0002121b, 0x0000a2ba, 0x000201bc, 0x00024085, 0x00023ec6, 0x00023ac3, 0x00024bba, 0x000242bb, 0x0002124b, 0x00003f7b, 0x00023eac, 0x0002321b, 0x0002120b, 0x00024b7b, 0x000240b2, 0x0002323b, 0x00024b7b, 0x000242bc, 0x0002221b, 0x0000511b, 0x0002121b, 0x0000153a, 0 })),
        std::make_pair(std::to_array<char8_t>({ 0xC0, 0x2A, 0xAA, 0xAA, 0xAA, 0xAB, 0x00, 0xAA, 0xAA, 0xAA, 0xAC, 0x08, 0xAA, 0xAA, 0xAA, 0xC2, 0xAA, 0xAA, 0xAA, 0xAA, 0xC2, 0xAA, 0xAA, 0xAA, 0xAE, 0xAA, 0xAA, 0xAA, 0xAA, 0x56, 0xAA, 0xAA, 0xAA, 0xAA, 0xB5, 0x5A, 0xAA, 0xAA, 0xAA, 0x96, 0xAA, 0xAA, 0xAA, 0xAA, 0xD5, 0xAA, 0xAA, 0xAA, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xB5, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xDA, 0xAA, 0xAA, 0xAA, 0x97, 0x56, 0xAA, 0xAA, 0xAA, 0x8A, 0xAA, 0xAA, 0xAA, 0xAB, 0xAA, 0xAA, 0xAA, 0xAB, 0x5A, 0xAA, 0xAA, 0xAB, 0x56, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA8, 0x2A, 0xAA, 0xAA, 0xB0, 0x0A, 0xAA, 0xAA, 0xA6, 0xD6, 0xAB, 0x55, 0x6A, 0xAA, 0xAA, 0xA9, 0x4A, 0xAA, 0xAA, 0xA6, 0xAA, 0xAA, 0xAD, 0x56, 0xAA, 0xAA, 0xB5, 0x6A, 0xAA, 0xAA, 0x03, 0x2A, 0xAA, 0xAA, 0xA6, 0x5B, 0xF0, 0x0A, 0xAA, 0xAA, 0xAA, 0x6E, 0xEF, 0xC0, 0x2A, 0xAA, 0xAA, 0xAA, 0xEB, 0x00, 0xAA, 0xAA, 0xAA, 0xA8, 0x0A, 0xAA, 0xAA, 0xAA, 0x80, 0x2A, 0xAA, 0xAA, 0xAA, 0x54, 0xAA, 0xAA, 0xAA, 0xA1, 0xAA, 0xAA, 0xAA, 0xA0, 0xAA, 0xAA, 0xAA, 0xA0, 0x0A, 0xAA, 0xAA, 0xAA, 0xC0, 0x2A, 0xAA, 0xAA, 0xB0, 0x02, 0xAA, 0xAA, 0xB0, 0x0A, 0xAA, 0xAC, 0x2A, 0xAA, 0xAA, 0xB0, 0xAA, 0xAA, 0xAE, 0xAA, 0xAA, 0xA9, 0x5A, 0xAA, 0xAA, 0xA9, 0xD5, 0xAA, 0xAA, 0xA5, 0xAA, 0xAA, 0xAA, 0xB5, 0x6A, 0xAA, 0xA6, 0xAA, 0xAA, 0xAB, 0x5A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xDA, 0xAA, 0xAA, 0xD5, 0x56, 0xAA, 0xAA, 0x2A, 0xAA, 0xAA, 0xBA, 0xAA, 0xAA, 0xD6, 0xAA, 0xAB, 0x56, 0xAA, 0xAA, 0xAA, 0x82, 0xAA, 0xAC, 0x02, 0xAA, 0xA7, 0xB5, 0xAA, 0xD5, 0x56, 0xAA, 0xAA, 0x52, 0xAA, 0xA6, 0xAA, 0xB5, 0x5A, 0xAB, 0x56, 0xAA, 0x80, 0xFC, 0xAA, 0xAA, 0xA5, 0x58, 0x3F, 0x0A, 0xAA, 0xA9, 0xBB, 0xBF, 0x00, 0xAA, 0xAA, 0xAE, 0x80, 0x32, 0xAA, 0xAA, 0x82, 0xFA, 0xAA, 0xA8, 0x02, 0xAA, 0xAA, 0x96, 0xAA, 0xAA, 0x1A, 0xAA, 0xA8, 0x2A, 0xAA, 0xA0, 0x0A, 0xAA, 0xAB, 0x00, 0xAA, 0xAB, 0x00, 0xAA, 0xB0, 0xAA, 0xAB, 0x0A, 0xAB, 0xAA, 0xA9, 0x5A, 0xAA, 0xAD, 0x56, 0xAA, 0x5A, 0xAA, 0xB5, 0x6A, 0xAC, 0x02, 0xA9, 0xAA, 0xAB, 0x5A, 0xAA, 0xAA, 0xAD, 0xAA, 0xB5, 0x5A, 0xA2, 0xAA, 0xAE, 0xAA, 0x0A, 0xAA, 0xB2, 0xAA, 0xD5, 0x6A, 0xB5, 0xAA, 0x02, 0xAA, 0xA0, 0x0A, 0xAA, 0xB5, 0x5A, 0xAD, 0x6A, 0xBA, 0xAC, 0x2A, 0xAB, 0x0A, 0xA0, 0xC2, 0xAA, 0xC0, 0x2A, 0 }), std::to_array<char32_t>({ 0x00005fc0, 0x000230aa, 0x000231aa, 0x00023000, 0x000230aa, 0x00003cac, 0x000230aa, 0x000248aa, 0x000230aa, 0x000230aa, 0x000230c2, 0x000230aa, 0x000230ae, 0x000230aa, 0x00008baa, 0x000230aa, 0x000230aa, 0x00008fb5, 0x000230aa, 0x00021caa, 0x000230aa, 0x000230aa, 0x000230d5, 0x000230aa, 0x000230a9, 0x000230aa, 0x00023baa, 0x000230aa, 0x000230aa, 0x000230aa, 0x000230aa, 0x000230da, 0x000230aa, 0x00008b97, 0x000230aa, 0x000210aa, 0x000230aa, 0x000231aa, 0x000230aa, 0x000231aa, 0x0002305a, 0x000231aa, 0x00023056, 0x000230aa, 0x000230aa, 0x00005fa8, 0x000230aa, 0x00003eb0, 0x000230aa, 0x00025ca6, 0x00008aab, 0x0002306a, 0x00022faa, 0x0002304a, 0x00022caa, 0x000230aa, 0x00008bad, 0x000230aa, 0x0000a1b5, 0x000230aa, 0x00005f03, 0x000230aa, 0x000090a6, 0x00003ef0, 0x000230aa, 0x000106aa, 0x000246ef, 0x0002302a, 0x000230aa, 0x000034eb, 0x000230aa, 0x00022eaa, 0x0002300a, 0x000230aa, 0x00005f80, 0x000230aa, 0x000089aa, 0x000230aa, 0x000227aa, 0x000230aa, 0x000226aa, 0x000230aa, 0x000226aa, 0x0002300a, 0x000230aa, 0x00005fc0, 0x000230aa, 0x000036b0, 0x000230aa, 0x00003eb0, 0x000232aa, 0x0002302a, 0x000236aa, 0x000230aa, 0x000230ae, 0x00022faa, 0x0002305a, 0x00022faa, 0x000230d5, 0x00022baa, 0x000230aa, 0x00023baa, 0x0002306a, 0x000230a6, 0x000231aa, 0x0002305a, 0x000230aa, 0x000230aa, 0x000230da, 0x00025baa, 0x00023056, 0x00005faa, 0x000230aa, 0x000230ba, 0x00025caa, 0x000231aa, 0x00023056, 0x000230aa, 0x00023082, 0x000036ac, 0x00022daa, 0x000230b5, 0x00008bd5, 0x000230aa, 0x00023052, 0x000230a6, 0x00008fb5, 0x00008bab, 0x000206aa, 0x000230fc, 0x00022baa, 0x00007458, 0x0002300a, 0x000241a9, 0x000034bf, 0x000230aa, 0x000206ae, 0x00023032, 0x000208aa, 0x000230fa, 0x000036a8, 0x000230aa, 0x00023096, 0x00004faa, 0x00022eaa, 0x0002302a, 0x00003ea0, 0x000231aa, 0x00023000, 0x000034ab, 0x000236aa, 0x000231aa, 0x0002310a, 0x00022faa, 0x0002305a, 0x00008bad, 0x00008faa, 0x00023baa, 0x0002326a, 0x00022f02, 0x000231aa, 0x0002305a, 0x000233aa, 0x00023baa, 0x0002285a, 0x000234aa, 0x00003eaa, 0x000238aa, 0x00025baa, 0x00023b6a, 0x000036aa, 0x000226aa, 0x0002300a, 0x00008fb5, 0x0000a1ad, 0x000232ba, 0x0002312a, 0x0002260a, 0x000230c2, 0x00005fc0, 0 }))
    );
}

constexpr bool testCompileTimeEncode() {
    constexpr auto list = getTestPairs();

    std::size_t failCount = 0;
    std::apply([&failCount](auto&&... args) {((failCount += (std::u32string_view{ args.second.data(), args.second.size() - 1 }.compare(std::u32string_view{ Base65536::encode(args.first, args.first.size() - 1) }) == 0) ? 0 : 1), ...); }, list);
    return failCount == 0;
}

static_assert(testCompileTimeEncode());

template<size_t I = 0, typename... Tp>
void testPairs(const std::tuple<Tp...>& t, std::size_t& failCount) {
    const auto pair = get<I>(t);
    failCount += (std::u32string{ pair.second.data(), pair.second.size() - 1 } == (Base65536::encode(std::u8string{ pair.first.data(), pair.first.size() - 1}))) ? 0 : 1;
    if constexpr (I + 1 != sizeof...(Tp))
        testPairs<I + 1>(t, failCount);
}

bool testEncoder(int& exitState) {
    constexpr auto list = getTestPairs();

    std::size_t failCount = 0;
    testPairs(list, failCount);
    return failCount == 0;
}

int main() {
    //std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;
    //IMPORTANT wstring_convert has been deprecated, we are only using for testing reasons

    using namespace Base65536;

    static constexpr char testInput[] =
        "hello world";

    std::cout << testInput << '\n';
    constexpr auto test = encode(testInput);
    constexpr auto data = decode(test);
    //std::cout << converter.to_bytes(std::u32string(test)) << '\n';
    std::cout << std::string_view(data) << '\n';
    std::cout << std::string(data).length() << " " << std::string(testInput).length() << '\n';
    static_assert(data.success);
    static_assert(std::string_view{ testInput }.compare(std::string_view{ data }) == 0);
    std::string runtimeTestInput = testInput;
    const auto runtimeTest = encode(runtimeTestInput);
    //std::cout << converter.to_bytes(runtimeTest) << '\n';
    int exitState = 0;
    if (runtimeTest == test.data.data()) {
        std::cout << "Encoder : output matches compile time version" << '\n';
    }
    else {
        std::cout << "Encoder : output doesn't match" << '\n';
        exitState = 1;
    }
    bool fail = false;
    const auto runtimeData = decode(runtimeTest, fail);
    std::cout << (fail ? "decode fail\n" : "decoded\n");
    if (runtimeData == testInput) {
        std::cout << "Decoder : output matches input" << '\n';
    }
    else {
        std::cout << "Decoder : output doesn't match" << '\n';
        exitState = 1;
    }
    static constexpr char passStr[] = "PASS\n";
    static constexpr char failStr[] = "FAIL\n";
    const bool badStringsTest = testErrorChecks(exitState);
    if (!badStringsTest) exitState = 1;
    std::cout << "Decode bad strings test : " << (badStringsTest ? passStr : failStr);
    const bool encoderTest = testEncoder(exitState);
    if (!encoderTest) exitState = 1;
    std::cout << "Encoder test : " << (encoderTest ? passStr : failStr);
    return exitState;
}